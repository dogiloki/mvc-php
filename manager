<?php

spl_autoload_register(function($clase){
	$path=str_replace("\\","/",$clase).".php";
	if(file_exists($path)){
		require_once($path);
	}
});

require "vendor/autoload.php";
require_once("libs/helpers.php");
use libs\Config;
use libs\Console\Manager;
use libs\DB\DB;

Manager::command("new {type} {name} {name2?}",function($console,$type,$name,$name2){
	$types=[
		"controller"=>[
			"filesystem"=>"controllers.path",
			"message"=>"Controlador",
			"template"=>"Controller.txt"
		],
		"model"=>[
			"filesystem"=>"models.path",
			"message"=>"Modelo",
			"template"=>"Model.txt"
		],
		"migration"=>[
			"filesystem"=>"database.migrations",
			"message"=>"Migración",
			"template"=>"Migration.txt"
		],
		"seeder"=>[
			"filesystem"=>"database.seeders",
			"message"=>"Semilla",
			"template"=>"Seeder.txt"
		],
		"middleware"=>[
			"filesystem"=>"middlewares.path",
			"message"=>"Middleware",
			"template"=>"Middleware.txt"
		],
		"service"=>[
			"filesystem"=>"services.path",
			"message"=>"Servicio",
			"template"=>"Service.txt"
		],
		"validator"=>[
			"filesystem"=>"validators.path",
			"message"=>"Validador",
			"template"=>"Validator.txt"
		]
	];
	$name2??"";
	if(!isset($types[$type])){
		$console->error("No existe el parámetro ".$type)->exit();
	}
	$date=date("Y_m_d_His");
	if($type=="migration"){
		$name=$date."_".$name;
	}
	$path=Config::filesystem($types[$type]["filesystem"])."/".$name;
	$name=basename($path);
	$path.=".php";
	$dirname=dirname($path);
	if(file_exists($path)){
		$console->error("El ".$types[$type]["message"]." ".$path." ya existe")->exit();
	}
	if(!file_exists($dirname)){
		mkdir($dirname,0755,true);
	}
	$space=str_replace("/","\\",$dirname);
	$file=fopen($path,"w+b");
	if(!$file){
		$console->error("No se tiene acceso al archivo ".$path)->exit();
	}
	fwrite($file,messageFormat(file_get_contents("libs/Template/".$types[$type]["template"]),compact("name2","name","space")));
	fclose($file);
	$console->success($types[$type]["message"]." creado ".$path)->exit();
})->describe("Crear un nuevo archivo en base a una plantilla, ubicada en libs/Template");

Manager::command("create",function($console){
	$folders=Config::filesystem('create.folders')??[];
	$files=Config::filesystem('create.files')??[];
	foreach($folders as $dir){
		if(!file_exists($dir)){
			mkdir($dir,0777,true);
			$console->success("Se creó el directorio ".$dir);
		}
	}
	foreach($files as $file){
		if(!file_exists($file['path'])){
			file_put_contents($file['path'],$file['content']);
			$console->success("Se creó el archivo ".$file['path']);
		}
	}
})->describe("Crear carpetas y archivos iniciales para el framework");

Manager::command("migrate {type?}",function($console,$type){
	$type??="up";
	$type=$type=="rollback"?'down':'up';
	$migrate=new libs\DB\Migrate();
	$migrate->init();
	$migrate->migrate($type);
});

Manager::command("seeder",function($console){
	$seeder=new database\seeders\DatabaseSeeder();
	$seeder->run();
});

Manager::command("db {type} {name?} {table?}",function($console,$type,$name,$table){
	$name??="backup";
	$folder=Config::filesystem('database.backups');
	$file=$folder."/".$name.".sql";
	$password=Config::database('password');
	if($type=="export"){
		$command="mysqldump --user=".Config::database('user')." ".($password==null?"":"--password=".$password)." --host=".Config::database('host')." --port=".Config::database('port')." ".Config::database('database').($table==null?"":(" ".$table))." > ".$file;
		system($command,$output);
		if($output){
			$console->error("Error al exportar base de datos ".$file);
		}else{
			$console->success("Base de datos exportada ".$file);
		}
	}else
	if($type=="import"){
		$console->info("Importe el archivo ".$file." manualmente (automático pendiente)");
	}else
	if($type=="show"){
		$files=scandir($folder);
		foreach($files as $file){
			if($file!=='.' && $file!=='..'){
				$console->info($folder."/".$file);
			}
		}	
	}else
	if($type=="remove"){
		if(unlink($file)){
			$console->success("Respaldo de base de datos eliminado ".$file);
		}else{
			$console->error("Error al eliminar resplado base de datos ".$file);
		}
	}
})->describe("Respaldos de base de datos base de datos en formato sql");

Manager::command("server {port?}",function($console,$port){
	$port??=8000;
	exec('php -S 127.0.0.1:'.$port." -t ".Config::filesystem('public.path'));
});

Manager::command("scss",function($console){
	$path_input=Config::filesystem('scss.path_input');
    $path_output=Config::filesystem('scss.path_output');
	exec('sass --watch '.$path_input.':'.$path_output);
});

Manager::call($argv);

?>